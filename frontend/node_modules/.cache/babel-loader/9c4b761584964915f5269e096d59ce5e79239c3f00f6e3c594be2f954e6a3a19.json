{"ast":null,"code":"var _jsxFileName = \"C:\\\\Ashish-project\\\\speech-to-text-whisper\\\\voice-recorder-app\\\\src\\\\VoiceRecorder.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction VoiceRecorder({\n  onTranscribe,\n  onError\n}) {\n  _s();\n  const [isRecording, setIsRecording] = useState(false);\n  const [audioBlob, setAudioBlob] = useState(null);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const mediaRecorderRef = useRef(null);\n  const audioChunksRef = useRef([]);\n  const startRecording = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n      mediaRecorderRef.current = new MediaRecorder(stream);\n      mediaRecorderRef.current.ondataavailable = event => {\n        audioChunksRef.current.push(event.data);\n      };\n      mediaRecorderRef.current.onstop = () => {\n        const audioBlob = new Blob(audioChunksRef.current, {\n          type: 'audio/wav'\n        });\n        setAudioBlob(audioBlob);\n        audioChunksRef.current = [];\n      };\n      mediaRecorderRef.current.start();\n      setIsRecording(true);\n    } catch (err) {\n      console.error('Error accessing microphone:', err);\n      onError('Unable to access microphone. Please check permissions.');\n    }\n  };\n  const stopRecording = () => {\n    mediaRecorderRef.current.stop();\n    setIsRecording(false);\n  };\n  const sendRecording = async () => {\n    if (!audioBlob) return;\n    setIsProcessing(true);\n    const formData = new FormData();\n    formData.append('audio', audioBlob, 'recording.wav');\n    try {\n      const response = await axios.post('http://localhost:5000/transcribe', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      const transcription = response.data.transcription;\n      if (transcription) {\n        onTranscribe(transcription);\n        setAudioBlob(null);\n      } else {\n        onError('No transcription received');\n      }\n    } catch (error) {\n      console.error('Error sending recording:', error);\n      onError('Failed to transcribe audio. Please try again.');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"voice-recorder\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"recording-controls\",\n      children: [!isRecording ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startRecording,\n        disabled: isProcessing,\n        className: \"start-recording-btn\",\n        children: \"Start Recording\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: stopRecording,\n        className: \"stop-recording-btn\",\n        children: \"Stop Recording\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this), audioBlob && !isProcessing && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendRecording,\n        className: \"transcribe-btn\",\n        children: \"Transcribe\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this), isProcessing && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"processing-indicator\",\n        children: \"Processing... Please wait\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n_s(VoiceRecorder, \"O4WNadUlToJ5RhzjVcQSxu6DJUg=\");\n_c = VoiceRecorder;\nexport default VoiceRecorder;\nvar _c;\n$RefreshReg$(_c, \"VoiceRecorder\");","map":{"version":3,"names":["React","useState","useRef","axios","jsxDEV","_jsxDEV","VoiceRecorder","onTranscribe","onError","_s","isRecording","setIsRecording","audioBlob","setAudioBlob","isProcessing","setIsProcessing","mediaRecorderRef","audioChunksRef","startRecording","stream","navigator","mediaDevices","getUserMedia","audio","current","MediaRecorder","ondataavailable","event","push","data","onstop","Blob","type","start","err","console","error","stopRecording","stop","sendRecording","formData","FormData","append","response","post","headers","transcription","className","children","onClick","disabled","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Ashish-project/speech-to-text-whisper/voice-recorder-app/src/VoiceRecorder.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport axios from 'axios';\r\n\r\nfunction VoiceRecorder({ onTranscribe, onError }) {\r\n  const [isRecording, setIsRecording] = useState(false);\r\n  const [audioBlob, setAudioBlob] = useState(null);\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n  const mediaRecorderRef = useRef(null);\r\n  const audioChunksRef = useRef([]);\r\n\r\n  const startRecording = async () => {\r\n    try {\r\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\r\n      mediaRecorderRef.current = new MediaRecorder(stream);\r\n      \r\n      mediaRecorderRef.current.ondataavailable = (event) => {\r\n        audioChunksRef.current.push(event.data);\r\n      };\r\n\r\n      mediaRecorderRef.current.onstop = () => {\r\n        const audioBlob = new Blob(audioChunksRef.current, { type: 'audio/wav' });\r\n        setAudioBlob(audioBlob);\r\n        audioChunksRef.current = [];\r\n      };\r\n\r\n      mediaRecorderRef.current.start();\r\n      setIsRecording(true);\r\n    } catch (err) {\r\n      console.error('Error accessing microphone:', err);\r\n      onError('Unable to access microphone. Please check permissions.');\r\n    }\r\n  };\r\n\r\n  const stopRecording = () => {\r\n    mediaRecorderRef.current.stop();\r\n    setIsRecording(false);\r\n  };\r\n\r\n  const sendRecording = async () => {\r\n    if (!audioBlob) return;\r\n\r\n    setIsProcessing(true);\r\n    const formData = new FormData();\r\n    formData.append('audio', audioBlob, 'recording.wav');\r\n\r\n    try {\r\n      const response = await axios.post('http://localhost:5000/transcribe', formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data'\r\n        }\r\n      });\r\n\r\n      const transcription = response.data.transcription;\r\n      \r\n      if (transcription) {\r\n        onTranscribe(transcription);\r\n        setAudioBlob(null);\r\n      } else {\r\n        onError('No transcription received');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error sending recording:', error);\r\n      onError('Failed to transcribe audio. Please try again.');\r\n    } finally {\r\n      setIsProcessing(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"voice-recorder\">\r\n      <div className=\"recording-controls\">\r\n        {!isRecording ? (\r\n          <button \r\n            onClick={startRecording} \r\n            disabled={isProcessing}\r\n            className=\"start-recording-btn\"\r\n          >\r\n            Start Recording\r\n          </button>\r\n        ) : (\r\n          <button \r\n            onClick={stopRecording}\r\n            className=\"stop-recording-btn\"\r\n          >\r\n            Stop Recording\r\n          </button>\r\n        )}\r\n\r\n        {audioBlob && !isProcessing && (\r\n          <button \r\n            onClick={sendRecording}\r\n            className=\"transcribe-btn\"\r\n          >\r\n            Transcribe\r\n          </button>\r\n        )}\r\n\r\n        {isProcessing && (\r\n          <div className=\"processing-indicator\">\r\n            Processing... Please wait\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default VoiceRecorder;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}