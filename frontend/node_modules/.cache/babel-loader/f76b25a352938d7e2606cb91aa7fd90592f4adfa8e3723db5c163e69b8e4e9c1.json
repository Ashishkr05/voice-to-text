{"ast":null,"code":"var _jsxFileName = \"C:\\\\Ashish-project\\\\speech-to-text-whisper\\\\voice-recorder-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [isRecording, setIsRecording] = useState(false);\n  const [audioBlob, setAudioBlob] = useState(null);\n  const startRecording = async () => {\n    const stream = await navigator.mediaDevices.getUserMedia({\n      audio: true\n    });\n    const mediaRecorder = new MediaRecorder(stream);\n    let chunks = [];\n    mediaRecorder.ondataavailable = event => chunks.push(event.data);\n    mediaRecorder.onstop = () => {\n      const audioBlob = new Blob(chunks, {\n        type: 'audio/webm'\n      });\n      setAudioBlob(audioBlob);\n    };\n    mediaRecorder.start();\n    setIsRecording(true);\n    setTimeout(() => {\n      mediaRecorder.stop();\n      setIsRecording(false);\n    }, 5000); // Stop recording after 5 seconds\n  };\n  const sendToAPI = async () => {\n    if (!audioBlob) return;\n    const formData = new FormData();\n    formData.append('audio', audioBlob);\n    const response = await fetch('http://localhost:5000/api/whisper', {\n      method: 'POST',\n      body: formData\n    });\n    const result = await response.json();\n    console.log(result); // Output speech-to-text result\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startRecording,\n      disabled: isRecording,\n      children: isRecording ? 'Recording...' : 'Start Recording'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), audioBlob && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: sendToAPI,\n      children: \"Send to API\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"tG66NFxpjY2gLnlP/alHFoAj3x0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","isRecording","setIsRecording","audioBlob","setAudioBlob","startRecording","stream","navigator","mediaDevices","getUserMedia","audio","mediaRecorder","MediaRecorder","chunks","ondataavailable","event","push","data","onstop","Blob","type","start","setTimeout","stop","sendToAPI","formData","FormData","append","response","fetch","method","body","result","json","console","log","children","onClick","disabled","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Ashish-project/speech-to-text-whisper/voice-recorder-app/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\n\nconst App = () => {\n  const [isRecording, setIsRecording] = useState(false);\n  const [audioBlob, setAudioBlob] = useState(null);\n\n  const startRecording = async () => {\n    const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n    const mediaRecorder = new MediaRecorder(stream);\n\n    let chunks = [];\n    mediaRecorder.ondataavailable = (event) => chunks.push(event.data);\n    mediaRecorder.onstop = () => {\n      const audioBlob = new Blob(chunks, { type: 'audio/webm' });\n      setAudioBlob(audioBlob);\n    };\n\n    mediaRecorder.start();\n    setIsRecording(true);\n\n    setTimeout(() => {\n      mediaRecorder.stop();\n      setIsRecording(false);\n    }, 5000); // Stop recording after 5 seconds\n  };\n\n  const sendToAPI = async () => {\n    if (!audioBlob) return;\n\n    const formData = new FormData();\n    formData.append('audio', audioBlob);\n\n    const response = await fetch('http://localhost:5000/api/whisper', {\n      method: 'POST',\n      body: formData,\n    });\n\n    const result = await response.json();\n    console.log(result); // Output speech-to-text result\n  };\n\n  return (\n    <div>\n      <button onClick={startRecording} disabled={isRecording}>\n        {isRecording ? 'Recording...' : 'Start Recording'}\n      </button>\n      {audioBlob && <button onClick={sendToAPI}>Send to API</button>}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGN,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACO,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAEhD,MAAMS,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,MAAMC,MAAM,GAAG,MAAMC,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;MAAEC,KAAK,EAAE;IAAK,CAAC,CAAC;IACzE,MAAMC,aAAa,GAAG,IAAIC,aAAa,CAACN,MAAM,CAAC;IAE/C,IAAIO,MAAM,GAAG,EAAE;IACfF,aAAa,CAACG,eAAe,GAAIC,KAAK,IAAKF,MAAM,CAACG,IAAI,CAACD,KAAK,CAACE,IAAI,CAAC;IAClEN,aAAa,CAACO,MAAM,GAAG,MAAM;MAC3B,MAAMf,SAAS,GAAG,IAAIgB,IAAI,CAACN,MAAM,EAAE;QAAEO,IAAI,EAAE;MAAa,CAAC,CAAC;MAC1DhB,YAAY,CAACD,SAAS,CAAC;IACzB,CAAC;IAEDQ,aAAa,CAACU,KAAK,CAAC,CAAC;IACrBnB,cAAc,CAAC,IAAI,CAAC;IAEpBoB,UAAU,CAAC,MAAM;MACfX,aAAa,CAACY,IAAI,CAAC,CAAC;MACpBrB,cAAc,CAAC,KAAK,CAAC;IACvB,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;EACZ,CAAC;EAED,MAAMsB,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC5B,IAAI,CAACrB,SAAS,EAAE;IAEhB,MAAMsB,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAExB,SAAS,CAAC;IAEnC,MAAMyB,QAAQ,GAAG,MAAMC,KAAK,CAAC,mCAAmC,EAAE;MAChEC,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEN;IACR,CAAC,CAAC;IAEF,MAAMO,MAAM,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IACpCC,OAAO,CAACC,GAAG,CAACH,MAAM,CAAC,CAAC,CAAC;EACvB,CAAC;EAED,oBACElC,OAAA;IAAAsC,QAAA,gBACEtC,OAAA;MAAQuC,OAAO,EAAEhC,cAAe;MAACiC,QAAQ,EAAErC,WAAY;MAAAmC,QAAA,EACpDnC,WAAW,GAAG,cAAc,GAAG;IAAiB;MAAAsC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3C,CAAC,EACRvC,SAAS,iBAAIL,OAAA;MAAQuC,OAAO,EAAEb,SAAU;MAAAY,QAAA,EAAC;IAAW;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3D,CAAC;AAEV,CAAC;AAAC1C,EAAA,CA/CID,GAAG;AAAA4C,EAAA,GAAH5C,GAAG;AAiDT,eAAeA,GAAG;AAAC,IAAA4C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}