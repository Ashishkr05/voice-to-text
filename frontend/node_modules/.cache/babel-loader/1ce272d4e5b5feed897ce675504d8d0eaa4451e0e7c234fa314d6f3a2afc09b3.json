{"ast":null,"code":"var _jsxFileName = \"C:\\\\Ashish-project\\\\speech-to-text-whisper\\\\voice-recorder-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { ReactMic } from \"react-mic\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [isRecording, setIsRecording] = useState(false);\n  const [audioBlob, setAudioBlob] = useState(null);\n  const [transcription, setTranscription] = useState(\"\");\n  const startRecording = () => {\n    setIsRecording(true);\n  };\n  const stopRecording = () => {\n    setIsRecording(false);\n  };\n  const onStop = recordedBlob => {\n    setAudioBlob(recordedBlob.blob);\n  };\n  const sendAudioToBackend = async () => {\n    if (!audioBlob) return alert(\"No audio recorded!\");\n    const formData = new FormData();\n    formData.append(\"audio\", audioBlob, \"audio.wav\");\n    try {\n      const response = await axios.post(\"http://localhost:5000/transcribe\", formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\"\n        }\n      });\n      setTranscription(response.data.transcription);\n    } catch (error) {\n      console.error(\"Error transcribing audio:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Speech-to-Text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ReactMic, {\n      record: isRecording,\n      onStop: onStop,\n      mimeType: \"audio/wav\",\n      strokeColor: \"#000000\",\n      backgroundColor: \"#FF4081\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startRecording,\n      disabled: isRecording,\n      children: \"Start Recording\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: stopRecording,\n      disabled: !isRecording,\n      children: \"Stop Recording\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: sendAudioToBackend,\n      disabled: !audioBlob,\n      children: \"Transcribe\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Transcription:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: transcription\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"25s6la2r2MfSRSIMY7kj1zFfoEQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","ReactMic","axios","jsxDEV","_jsxDEV","App","_s","isRecording","setIsRecording","audioBlob","setAudioBlob","transcription","setTranscription","startRecording","stopRecording","onStop","recordedBlob","blob","sendAudioToBackend","alert","formData","FormData","append","response","post","headers","data","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","record","mimeType","strokeColor","backgroundColor","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Ashish-project/speech-to-text-whisper/voice-recorder-app/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { ReactMic } from \"react-mic\";\nimport axios from \"axios\";\n\nconst App = () => {\n    const [isRecording, setIsRecording] = useState(false);\n    const [audioBlob, setAudioBlob] = useState(null);\n    const [transcription, setTranscription] = useState(\"\");\n\n    const startRecording = () => {\n        setIsRecording(true);\n    };\n\n    const stopRecording = () => {\n        setIsRecording(false);\n    };\n\n    const onStop = (recordedBlob) => {\n        setAudioBlob(recordedBlob.blob);\n    };\n\n    const sendAudioToBackend = async () => {\n        if (!audioBlob) return alert(\"No audio recorded!\");\n\n        const formData = new FormData();\n        formData.append(\"audio\", audioBlob, \"audio.wav\");\n\n        try {\n            const response = await axios.post(\"http://localhost:5000/transcribe\", formData, {\n                headers: { \"Content-Type\": \"multipart/form-data\" },\n            });\n            setTranscription(response.data.transcription);\n        } catch (error) {\n            console.error(\"Error transcribing audio:\", error);\n        }\n    };\n\n    return (\n        <div>\n            <h1>Speech-to-Text</h1>\n            <ReactMic\n                record={isRecording}\n                onStop={onStop}\n                mimeType=\"audio/wav\"\n                strokeColor=\"#000000\"\n                backgroundColor=\"#FF4081\"\n            />\n            <button onClick={startRecording} disabled={isRecording}>Start Recording</button>\n            <button onClick={stopRecording} disabled={!isRecording}>Stop Recording</button>\n            <button onClick={sendAudioToBackend} disabled={!audioBlob}>Transcribe</button>\n\n            <h2>Transcription:</h2>\n            <p>{transcription}</p>\n        </div>\n    );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}